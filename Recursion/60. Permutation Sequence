/*
The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

Example 1:

Input: n = 3, k = 3
Output: "213"
Example 2:

Input: n = 4, k = 9
Output: "2314"
Example 3:

Input: n = 3, k = 1
Output: "123"
 
Constraints:

1 <= n <= 9
1 <= k <= n!

*/


// Solution optimised- Storing numbers 1 to n in numbers vector; and find fact of 1 to n-1 ;
// For including first digit we find k/fact this will give us the index of digit from numbers vector;
// then erase the digit used from numbers, if numbers.size()==0 break; then k=k%fact; fact=fact/numbers.size()

class Solution {
public:
    string getPermutation(int n, int k) {
        string ans="";
        int fact=1;
        vector<int>numbers;
        for(int i=1; i<n; i++)
        {
            fact*=i;
            numbers.push_back(i);
        }
        numbers.push_back(n);
        k = k-1; // since we are taking 0th indexing
        while(true)
        {
            ans = ans + to_string(numbers[k/fact]);
            numbers.erase(numbers.begin()+k/fact);
            if(numbers.size()==0)
                break;
            k%=fact;
            fact/=numbers.size();
        }
        return ans;
    }
};


// Solution using Brute force; Find all the permutation and store in a vector then sort it. return ans[k-1].
// T.C- n!(log(n!)) and n! for creating permutation; Space- n!

class Solution {
public:
    void solve(vector<string>&ans, string &s, int idx)
    {
        if(idx>=s.length())
        {
            ans.push_back(s);
            return;
        }

        for(int i=idx; i<s.length(); i++)
        {
            swap(s[idx], s[i]);
            solve(ans, s, idx+1);
            swap(s[idx], s[i]);
        }
    }
    string getPermutation(int n, int k) {
        string s="";
        vector<string>ans;
        for(int i=1; i<=n; i++)
        {
            s+=(i+'0');
        }
        solve(ans, s, 0);
        sort(ans.begin(), ans.end());
        // for(int i=0; i<ans.size(); i++)
        // {
        //     cout<<ans[i]<<endl;
        // }
        return ans[k-1];
    }
};
